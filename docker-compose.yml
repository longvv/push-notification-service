services:
  # Vault - Quản lý bí mật và cấu hình
  vault:
    image: hashicorp/vault:latest
    platform: linux/arm64  # Phù hợp với M2
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dev-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./vault-init:/vault/config
      - vault_data:/vault/data
  # Database seeder container
  db-seeder:
    image: node:18-alpine
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
    working_dir: /app
    environment:
      # Database connection
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=notification_db
      - DB_USER=admin
      - DB_PASSWORD=admin123
      # Data generation options
      - USER_COUNT=100
      - NOTIFICATION_COUNT=500
      - TRUNCATE_FIRST=true
      - MODE=sequelize
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "npm install && 
        if [ -f data_test/data-generator.js ]; then
          node data_test/data-generator.js;
        elif [ -f data-generator.js ]; then
          node data-generator.js;
        else
          echo 'Error: Could not find data generator script';
          exit 1;
        fi"
  
  # PostgreSQL - Database chính để lưu user data và notification history
  postgres:
    image: postgres:latest
    platform: linux/arm64  # Cho M2
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount init scripts nếu cần
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Dùng cho caching và rate limiting
  redis:
    image: redis:latest
    platform: linux/arm64
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ - Message broker cho notification system
  rabbitmq:
    image: rabbitmq:3-management
    platform: linux/arm64
    ports:
      - "5672:5672"    # AMQP protocol
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch - Part of ELK Stack cho logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    platform: linux/arm64
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"  # Giới hạn memory usage
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash - Log processor
  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.0
    platform: linux/arm64
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Kibana - Log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.0
    platform: linux/arm64
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus
    platform: linux/arm64
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana
    platform: linux/arm64
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    depends_on:
      - prometheus

volumes:
  vault_data:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  node_modules: