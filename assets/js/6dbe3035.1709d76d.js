"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9839],{2713:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"database-seeder","title":"Database Seeder Documentation","description":"This package provides tools to generate realistic sample data for the Push Notification Service database. It supports multiple approaches including direct ORM-based generation, SQL file generation, and Docker-based setup.","source":"@site/docs/database-seeder.md","sourceDirName":".","slug":"/database-seeder","permalink":"/push-notification-service/docs/database-seeder","draft":false,"unlisted":false,"editUrl":"https://github.com/your-username/push-notification-service/tree/main/website/docs/database-seeder.md","tags":[],"version":"current","frontMatter":{"id":"database-seeder","title":"Database Seeder Documentation","sidebar_label":"Database Seeder"},"sidebar":"docsSidebar","previous":{"title":"Setup Guide","permalink":"/push-notification-service/docs/setup-and-configuration"},"next":{"title":"Technical Docs","permalink":"/push-notification-service/docs/technical-docs"}}');var a=s(4848),t=s(8453);const r={id:"database-seeder",title:"Database Seeder Documentation",sidebar_label:"Database Seeder"},d="Push Notification Service - Database Seeder",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Option 1: Automated Setup",id:"option-1-automated-setup",level:3},{value:"Option 2: Manual Setup",id:"option-2-manual-setup",level:3},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Advanced Usage",id:"advanced-usage",level:3},{value:"Generate with Sequelize ORM",id:"generate-with-sequelize-orm",level:4},{value:"Generate SQL File Only",id:"generate-sql-file-only",level:4},{value:"Generate and Execute SQL",id:"generate-and-execute-sql",level:4},{value:"Customize Data Volume",id:"customize-data-volume",level:4},{value:"Docker-based Approach",id:"docker-based-approach",level:3},{value:"Make Commands",id:"make-commands",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Generated Data",id:"generated-data",level:2},{value:"Data Model",id:"data-model",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Database Connection Issues",id:"database-connection-issues",level:3},{value:"Duplicate Key Errors",id:"duplicate-key-errors",level:3},{value:"Performance Issues",id:"performance-issues",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"push-notification-service---database-seeder",children:"Push Notification Service - Database Seeder"})}),"\n",(0,a.jsx)(n.p,{children:"This package provides tools to generate realistic sample data for the Push Notification Service database. It supports multiple approaches including direct ORM-based generation, SQL file generation, and Docker-based setup."}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"The database seeder creates the following sample data:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Users"}),": People who receive notifications"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Devices"}),": Mobile, web, or other devices registered to users"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Notifications"}),": Messages sent to users"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"User Preferences"}),": User-specific notification preferences"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Sent Notifications"}),": Records of notifications that have been delivered"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Notification Logs"}),": Detailed tracking of notification lifecycle"]}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart TD\n    Start[Start Seeder] --\x3e Config[Load Configuration]\n    Config --\x3e DB{Generation Method}\n    \n    DB --\x3e|Sequelize| ORM[ORM-based Generation]\n    DB --\x3e|SQL| SQL[SQL File Generation]\n    \n    ORM --\x3e Connect[Connect to Database]\n    Connect --\x3e Truncate{Truncate First?}\n    Truncate --\x3e|Yes| TruncateDB[Truncate Existing Data]\n    Truncate --\x3e|No| Generate[Generate Data]\n    TruncateDB --\x3e Generate\n    \n    SQL --\x3e CreateSQL[Create SQL File]\n    CreateSQL --\x3e Execute{Execute SQL?}\n    Execute --\x3e|Yes| RunSQL[Execute SQL Script]\n    Execute --\x3e|No| SaveSQL[Save SQL File]\n    \n    Generate & RunSQL & SaveSQL --\x3e Complete[Data Generation Complete]"}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Node.js 14+ and npm"}),"\n",(0,a.jsx)(n.li,{children:"PostgreSQL 12+ (if using direct database insertion)"}),"\n",(0,a.jsx)(n.li,{children:"Docker and Docker Compose (if using the Docker approach)"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.h3,{id:"option-1-automated-setup",children:"Option 1: Automated Setup"}),"\n",(0,a.jsx)(n.p,{children:"Run the installation script:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"chmod +x setup-seed-tools.sh\n./setup-seed-tools.sh\n"})}),"\n",(0,a.jsx)(n.h3,{id:"option-2-manual-setup",children:"Option 2: Manual Setup"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Install dependencies:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install sequelize pg pg-hstore faker uuid dotenv\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:["Create a ",(0,a.jsx)(n.code,{children:".env"})," file with your database configuration:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"DB_HOST=localhost\nDB_PORT=5432\nDB_NAME=notification_db\nDB_USER=admin\nDB_PASSWORD=admin123\n\n# Data generation options\nUSER_COUNT=100\nNOTIFICATION_COUNT=500\nSTART_DATE=2023-01-01\nTRUNCATE_FIRST=true\n\n# Mode: 'sequelize' or 'sql'\nMODE=sequelize\nEXECUTE_SQL=false\n"})}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.p,{children:"To generate data using the Sequelize ORM (directly inserts into database):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"node data-generator.js\n"})}),"\n",(0,a.jsx)(n.h3,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,a.jsx)(n.p,{children:"The enhanced data generator supports multiple modes and options:"}),"\n",(0,a.jsx)(n.h4,{id:"generate-with-sequelize-orm",children:"Generate with Sequelize ORM"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"MODE=sequelize node enhanced-data-generator.js\n"})}),"\n",(0,a.jsx)(n.h4,{id:"generate-sql-file-only",children:"Generate SQL File Only"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"MODE=sql EXECUTE_SQL=false node enhanced-data-generator.js\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Generated SQL will be saved to ",(0,a.jsx)(n.code,{children:"./generated-data/seed-data.sql"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"generate-and-execute-sql",children:"Generate and Execute SQL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"MODE=sql EXECUTE_SQL=true node enhanced-data-generator.js\n"})}),"\n",(0,a.jsx)(n.h4,{id:"customize-data-volume",children:"Customize Data Volume"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"USER_COUNT=500 NOTIFICATION_COUNT=2000 node enhanced-data-generator.js\n"})}),"\n",(0,a.jsx)(n.h3,{id:"docker-based-approach",children:"Docker-based Approach"}),"\n",(0,a.jsx)(n.p,{children:"Using Docker eliminates the need to install Node.js and dependencies locally:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Ensure Docker and Docker Compose are installed"}),"\n",(0,a.jsx)(n.li,{children:"Create necessary files (data-generator.js, docker-compose.yml)"}),"\n",(0,a.jsx)(n.li,{children:"Run:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker-compose up\n"})}),"\n",(0,a.jsx)(n.p,{children:"This will:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Start a PostgreSQL container"}),"\n",(0,a.jsx)(n.li,{children:"Initialize the database schema"}),"\n",(0,a.jsx)(n.li,{children:"Run the data generator script"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"make-commands",children:"Make Commands"}),"\n",(0,a.jsx)(n.p,{children:"If you've set up the Makefile, you can use these simplified commands:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Install dependencies\nmake install\n\n# Generate data using Sequelize ORM\nmake seed\n\n# Generate SQL file only\nmake sql\n\n# Generate and execute SQL\nmake execute-sql\n\n# Run using Docker\nmake docker-seed\n\n# Clean generated files\nmake clean\n\n# Reset the database (drop and recreate)\nmake reset-db\n"})}),"\n",(0,a.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(n.p,{children:"The following environment variables can be set:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Variable"}),(0,a.jsx)(n.th,{children:"Description"}),(0,a.jsx)(n.th,{children:"Default"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"MODE"})}),(0,a.jsx)(n.td,{children:"Generation mode: 'sequelize' or 'sql'"}),(0,a.jsx)(n.td,{children:"'sequelize'"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"USER_COUNT"})}),(0,a.jsx)(n.td,{children:"Number of users to generate"}),(0,a.jsx)(n.td,{children:"100"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"NOTIFICATION_COUNT"})}),(0,a.jsx)(n.td,{children:"Number of notifications to generate"}),(0,a.jsx)(n.td,{children:"500"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"START_DATE"})}),(0,a.jsx)(n.td,{children:"Start date for random dates"}),(0,a.jsx)(n.td,{children:"'2023-01-01'"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"TRUNCATE_FIRST"})}),(0,a.jsx)(n.td,{children:"Whether to truncate tables before inserting"}),(0,a.jsx)(n.td,{children:"false"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"EXECUTE_SQL"})}),(0,a.jsx)(n.td,{children:"Execute generated SQL file"}),(0,a.jsx)(n.td,{children:"false"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"OUTPUT_DIR"})}),(0,a.jsx)(n.td,{children:"Directory for SQL output files"}),(0,a.jsx)(n.td,{children:"'./generated-data'"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DB_HOST"})}),(0,a.jsx)(n.td,{children:"Database host"}),(0,a.jsx)(n.td,{children:"'localhost'"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DB_PORT"})}),(0,a.jsx)(n.td,{children:"Database port"}),(0,a.jsx)(n.td,{children:"5432"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DB_NAME"})}),(0,a.jsx)(n.td,{children:"Database name"}),(0,a.jsx)(n.td,{children:"'notification_db'"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DB_USER"})}),(0,a.jsx)(n.td,{children:"Database user"}),(0,a.jsx)(n.td,{children:"'admin'"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DB_PASSWORD"})}),(0,a.jsx)(n.td,{children:"Database password"}),(0,a.jsx)(n.td,{children:"'admin123'"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"generated-data",children:"Generated Data"}),"\n",(0,a.jsx)(n.p,{children:"The data generator creates:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"100 users (configurable)"}),"\n",(0,a.jsx)(n.li,{children:"1-3 devices per user"}),"\n",(0,a.jsx)(n.li,{children:"500 notifications (configurable)"}),"\n",(0,a.jsx)(n.li,{children:"1-4 notification preferences per user"}),"\n",(0,a.jsx)(n.li,{children:"~80% of notifications marked as sent"}),"\n",(0,a.jsx)(n.li,{children:"2-5 log entries per notification"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Types of data included:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Device types: android, iOS, web"}),"\n",(0,a.jsx)(n.li,{children:"Notification types: message, friend_request, payment, security, marketing, system"}),"\n",(0,a.jsx)(n.li,{children:"Log types: created, processed, sent, delivered, failed, clicked"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"data-model",children:"Data Model"}),"\n",(0,a.jsx)(n.mermaid,{value:"erDiagram\n    USERS {\n        int id PK\n        string name\n        string email\n        string phone\n        datetime created_at\n    }\n    \n    DEVICES {\n        int id PK\n        int user_id FK\n        string device_token\n        string device_type\n        datetime created_at\n    }\n    \n    NOTIFICATIONS {\n        int id PK\n        int user_id FK\n        string title\n        string body\n        datetime created_at\n    }\n    \n    USER_PREFERENCES {\n        int id PK\n        int user_id FK\n        string notification_type\n        datetime created_at\n    }\n    \n    SENT_NOTIFICATIONS {\n        int id PK\n        int notification_id FK\n        datetime sent_at\n    }\n    \n    NOTIFICATION_LOGS {\n        int id PK\n        int notification_id FK\n        string log_type\n        string log_message\n        datetime created_at\n    }\n    \n    USERS ||--o{ DEVICES : has\n    USERS ||--o{ NOTIFICATIONS : receives\n    USERS ||--o{ USER_PREFERENCES : configures\n    NOTIFICATIONS ||--o{ SENT_NOTIFICATIONS : tracked_by\n    NOTIFICATIONS ||--o{ NOTIFICATION_LOGS : logged_in"}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"database-connection-issues",children:"Database Connection Issues"}),"\n",(0,a.jsx)(n.p,{children:"If you encounter connection errors:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Verify your database credentials in ",(0,a.jsx)(n.code,{children:".env"})]}),"\n",(0,a.jsx)(n.li,{children:"Ensure PostgreSQL is running"}),"\n",(0,a.jsx)(n.li,{children:"Check if the database exists and is accessible"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example troubleshooting:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Check PostgreSQL status\nsudo service postgresql status\n\n# Connect to database manually\npsql -h localhost -U admin -d notification_db\n\n# Check if tables exist\n\\dt\n"})}),"\n",(0,a.jsx)(n.h3,{id:"duplicate-key-errors",children:"Duplicate Key Errors"}),"\n",(0,a.jsx)(n.p,{children:"If you run the script multiple times, you may get unique constraint violations:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Set ",(0,a.jsx)(n.code,{children:"TRUNCATE_FIRST=true"})," to clear tables before inserting"]}),"\n",(0,a.jsxs)(n.li,{children:["Or run ",(0,a.jsx)(n.code,{children:"make reset-db"})," to completely reset the database"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,a.jsx)(n.p,{children:"For large volumes of data:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Use the SQL generation mode (",(0,a.jsx)(n.code,{children:"MODE=sql"}),") which is more efficient"]}),"\n",(0,a.jsxs)(n.li,{children:["Increase Node.js memory if needed: ",(0,a.jsx)(n.code,{children:"NODE_OPTIONS=--max-old-space-size=4096"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}}}]);