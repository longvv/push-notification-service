"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9020],{8285:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"technical-docs","title":"Technical Documentation","description":"This document provides detailed technical documentation for the Push Notification Service codebase, explaining the current architecture, patterns, and implementation details.","source":"@site/docs/technical-docs.md","sourceDirName":".","slug":"/technical-docs","permalink":"/push-notification-service/docs/technical-docs","draft":false,"unlisted":false,"editUrl":"https://github.com/your-username/push-notification-service/tree/main/website/docs/technical-docs.md","tags":[],"version":"current","frontMatter":{"id":"technical-docs","title":"Technical Documentation","sidebar_label":"Technical Docs"},"sidebar":"docsSidebar","previous":{"title":"Database Seeder","permalink":"/push-notification-service/docs/database-seeder"},"next":{"title":"API Reference","permalink":"/push-notification-service/docs/api"}}');var t=i(4848),r=i(8453);const o={id:"technical-docs",title:"Technical Documentation",sidebar_label:"Technical Docs"},l="Technical Documentation",a={},c=[{value:"Current Implementation Status",id:"current-implementation-status",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. API Server (src/api)",id:"1-api-server-srcapi",level:3},{value:"Key Features:",id:"key-features",level:4},{value:"Current Implementation Status:",id:"current-implementation-status-1",level:4},{value:"API Server Initialization:",id:"api-server-initialization",level:4},{value:"2. Database Models (src/models)",id:"2-database-models-srcmodels",level:3},{value:"Implemented Models:",id:"implemented-models",level:4},{value:"Model Implementation Issues:",id:"model-implementation-issues",level:4},{value:"Model Definition Example:",id:"model-definition-example",level:4},{value:"3. WebSocket Server (src/websocket)",id:"3-websocket-server-srcwebsocket",level:3},{value:"Key Features:",id:"key-features-1",level:4},{value:"WebSocket Implementation:",id:"websocket-implementation",level:4},{value:"4. Message Queue Workers (src/workers)",id:"4-message-queue-workers-srcworkers",level:3},{value:"Key Features:",id:"key-features-2",level:4},{value:"Worker Implementation:",id:"worker-implementation",level:4},{value:"5. Configuration Modules (src/config)",id:"5-configuration-modules-srcconfig",level:3},{value:"Key Configurations:",id:"key-configurations",level:4},{value:"Implementation Issues:",id:"implementation-issues",level:4},{value:"Database Schema",id:"database-schema",level:2},{value:"Schema vs. Model Discrepancies:",id:"schema-vs-model-discrepancies",level:3},{value:"Schema Tables",id:"schema-tables",level:4},{value:"User Model (Missing Fields)",id:"user-model-missing-fields",level:4},{value:"Missing Models:",id:"missing-models",level:3},{value:"Message Queue Architecture",id:"message-queue-architecture",level:2},{value:"Exchanges",id:"exchanges",level:3},{value:"Queues",id:"queues",level:3},{value:"Routing Keys",id:"routing-keys",level:3},{value:"Message Structure",id:"message-structure",level:3},{value:"WebSocket Protocol",id:"websocket-protocol",level:2},{value:"Server to Client Events",id:"server-to-client-events",level:3},{value:"Client to Server Events",id:"client-to-server-events",level:3},{value:"Error Handling Approach",id:"error-handling-approach",level:2},{value:"API Error Handling",id:"api-error-handling",level:3},{value:"Worker Error Handling",id:"worker-error-handling",level:3},{value:"Connection Error Handling",id:"connection-error-handling",level:3},{value:"Metrics and Monitoring",id:"metrics-and-monitoring",level:2},{value:"Custom Metrics",id:"custom-metrics",level:3},{value:"Integration",id:"integration",level:3},{value:"Logging Strategy",id:"logging-strategy",level:2},{value:"Log Levels",id:"log-levels",level:3},{value:"Log Format",id:"log-format",level:3},{value:"Log Transport",id:"log-transport",level:3},{value:"Deployment Considerations",id:"deployment-considerations",level:2},{value:"Container Configuration",id:"container-configuration",level:3},{value:"Resource Requirements",id:"resource-requirements",level:3},{value:"Known Issues and Improvement Areas",id:"known-issues-and-improvement-areas",level:2},{value:"Code Style and Patterns",id:"code-style-and-patterns",level:2},{value:"Asynchronous Handling",id:"asynchronous-handling",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Logging",id:"logging",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"API Security",id:"api-security",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Testing Approach",id:"testing-approach",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Local Development",id:"local-development",level:3},{value:"Debugging",id:"debugging",level:3},{value:"Roadmap and Future Enhancements",id:"roadmap-and-future-enhancements",level:2},{value:"Short-term (Next Release)",id:"short-term-next-release",level:3},{value:"Mid-term",id:"mid-term",level:3},{value:"Long-term",id:"long-term",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"technical-documentation",children:"Technical Documentation"})}),"\n",(0,t.jsx)(n.p,{children:"This document provides detailed technical documentation for the Push Notification Service codebase, explaining the current architecture, patterns, and implementation details."}),"\n",(0,t.jsx)(n.h2,{id:"current-implementation-status",children:"Current Implementation Status"}),"\n",(0,t.jsxs)(n.p,{children:["For a detailed overview of which features are implemented vs. planned, please refer to the ",(0,t.jsx)(n.a,{href:"implementation-status",children:"Implementation Status"})," document."]}),"\n",(0,t.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"push-notification-service/\n\u251c\u2500\u2500 docker-compose.yml       # Docker services configuration\n\u251c\u2500\u2500 init-scripts/            # Database initialization scripts\n\u2502   \u2514\u2500\u2500 01-init.sql          # SQL script for database setup\n\u251c\u2500\u2500 logstash/                # Logstash configuration (for future use)\n\u251c\u2500\u2500 prometheus/              # Prometheus configuration\n\u2502   \u2514\u2500\u2500 prometheus.yml       # Prometheus metrics configuration\n\u251c\u2500\u2500 src/                     # Main application code\n\u2502   \u251c\u2500\u2500 api/                 # REST API implementation\n\u2502   \u2502   \u251c\u2500\u2500 controllers/     # API endpoint controllers\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 devices.js   # Device controller\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 notifications.js # Notification controller\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 users.js     # User controller\n\u2502   \u2502   \u251c\u2500\u2500 index.js         # API server setup\n\u2502   \u2502   \u2514\u2500\u2500 routes.js        # API route definitions\n\u2502   \u251c\u2500\u2500 config/              # Service configurations\n\u2502   \u2502   \u251c\u2500\u2500 database.js      # PostgreSQL connection\n\u2502   \u2502   \u251c\u2500\u2500 logging.js       # Winston logger config\n\u2502   \u2502   \u251c\u2500\u2500 metrics.js       # Prometheus metrics\n\u2502   \u2502   \u251c\u2500\u2500 rabbitmq.js      # RabbitMQ connection and queues\n\u2502   \u2502   \u2514\u2500\u2500 redis.js         # Redis connection (partially implemented)\n\u2502   \u251c\u2500\u2500 models/              # Database models\n\u2502   \u2502   \u251c\u2500\u2500 device.js        # Device model\n\u2502   \u2502   \u251c\u2500\u2500 index.js         # Model exports\n\u2502   \u2502   \u251c\u2500\u2500 notification.js  # Notification model\n\u2502   \u2502   \u2514\u2500\u2500 user.js          # User model (NEEDS UPDATE to match schema)\n\u2502   \u251c\u2500\u2500 websocket/           # WebSocket implementation\n\u2502   \u2502   \u2514\u2500\u2500 index.js         # WebSocket server\n\u2502   \u251c\u2500\u2500 workers/             # Background workers\n\u2502   \u2502   \u251c\u2500\u2500 index.js         # Worker initialization\n\u2502   \u2502   \u2514\u2500\u2500 notificationWorker.js # Notification processing\n\u2502   \u2514\u2500\u2500 index.js             # Main application entry point\n\u251c\u2500\u2500 data-generators/         # Test data generation tools\n\u2502   \u2514\u2500\u2500 data-generator.js    # Database seeder script\n\u251c\u2500\u2500 .env.example             # Example environment variables\n\u251c\u2500\u2500 Dockerfile               # Docker image configuration\n\u251c\u2500\u2500 Makefile                 # Helper commands\n\u2514\u2500\u2500 README.md                # Project README\n"})}),"\n",(0,t.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,t.jsx)(n.h3,{id:"1-api-server-srcapi",children:"1. API Server (src/api)"}),"\n",(0,t.jsx)(n.p,{children:"The API server is built using Express.js and provides RESTful endpoints for interacting with the system."}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart LR\n    Client[Client] --\x3e|HTTP Request| Express[Express.js Server]\n    Express --\x3e Router[API Router]\n    Router --\x3e UC[User Controller]\n    Router --\x3e DC[Device Controller]\n    Router --\x3e NC[Notification Controller]\n    UC & DC & NC --\x3e Models[Database Models]\n    Express --\x3e|/metrics| Prometheus[Prometheus Metrics]\n    Express --\x3e|Error| ErrorHandler[Error Handling Middleware]"}),"\n",(0,t.jsx)(n.h4,{id:"key-features",children:"Key Features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Route definitions (",(0,t.jsx)(n.code,{children:"routes.js"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Controller implementation (",(0,t.jsx)(n.code,{children:"controllers/"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Middleware configuration (",(0,t.jsx)(n.code,{children:"index.js"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Error handling and logging"}),"\n",(0,t.jsxs)(n.li,{children:["Prometheus metrics endpoint (",(0,t.jsx)(n.code,{children:"/metrics"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"current-implementation-status-1",children:"Current Implementation Status:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 Core route handling"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Basic CRUD operations for users, devices, and notifications"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Error handling middleware"}),"\n",(0,t.jsx)(n.li,{children:"\u26a0\ufe0f Missing some endpoints like notification scheduling, user preferences"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"api-server-initialization",children:"API Server Initialization:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// src/api/index.js\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst router = require('./routes');\nconst { register } = require('../config/metrics');\nconst logger = require('../config/logging');\n\nconst createServer = () => {\n  const app = express();\n  \n  // Middleware\n  app.use(helmet());\n  app.use(cors());\n  app.use(express.json());\n  \n  // Logging middleware\n  app.use((req, res, next) => {\n    const start = Date.now();\n    \n    res.on('finish', () => {\n      const duration = Date.now() - start;\n      logger.info({\n        method: req.method,\n        url: req.originalUrl,\n        status: res.statusCode,\n        duration,\n      });\n    });\n    \n    next();\n  });\n  \n  // Routes\n  app.use('/api', router);\n  \n  // Prometheus metrics endpoint\n  app.get('/metrics', async (req, res) => {\n    res.set('Content-Type', register.contentType);\n    res.end(await register.metrics());\n  });\n  \n  // Error handling\n  app.use((err, req, res, next) => {\n    logger.error(err);\n    res.status(500).json({ error: 'Internal Server Error' });\n  });\n  \n  return app;\n};\n\nmodule.exports = createServer;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-database-models-srcmodels",children:"2. Database Models (src/models)"}),"\n",(0,t.jsx)(n.p,{children:"The application uses Sequelize ORM to interact with PostgreSQL. The models represent the database tables and their relationships."}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n    User "1" -- "many" Device\n    User "1" -- "many" Notification\n    User "1" -- "many" UserPreference\n    Notification "1" -- "many" NotificationLog\n    Notification "1" -- "many" SentNotification\n    Notification "1" -- "many" FailedNotification\n    \n    class User {\n        +int id\n        +string email\n        +string name\n        +string phone\n        +datetime created_at\n    }\n    \n    class Device {\n        +int id\n        +int user_id\n        +string device_token\n        +string device_type\n        +datetime created_at\n    }\n    \n    class Notification {\n        +int id\n        +int user_id\n        +string title\n        +string body\n        +json data\n        +string status\n        +datetime sent_at\n        +datetime created_at\n    }\n    \n    class UserPreference {\n        +int id\n        +int user_id\n        +string notification_type\n        +datetime created_at\n    }\n    \n    class NotificationLog {\n        +int id\n        +int notification_id\n        +string log_type\n        +string log_message\n        +datetime created_at\n    }\n    \n    class SentNotification {\n        +int id\n        +int notification_id\n        +datetime sent_at\n    }\n    \n    class FailedNotification {\n        +int id\n        +int notification_id\n        +string error_message\n        +int retry_count\n        +datetime created_at\n    }'}),"\n",(0,t.jsx)(n.h4,{id:"implemented-models",children:"Implemented Models:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User"}),": Represents application users"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Device"}),": Represents user devices for notification delivery"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Notification"}),": Stores notification data and delivery status"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"model-implementation-issues",children:"Model Implementation Issues:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Model"}),": Missing ",(0,t.jsx)(n.code,{children:"name"})," and ",(0,t.jsx)(n.code,{children:"phone"})," fields that exist in the database schema"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Missing Models"}),": Several tables defined in the database schema don't have corresponding model files (UserPreferences, SentNotifications, etc.)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"model-definition-example",children:"Model Definition Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// src/models/notification.js\nconst { DataTypes } = require('sequelize');\nconst { sequelize } = require('../config/database');\nconst User = require('./user');\n\nconst Notification = sequelize.define('Notification', {\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true\n  },\n  user_id: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n    references: {\n      model: User,\n      key: 'id'\n    }\n  },\n  title: {\n    type: DataTypes.STRING(255),\n    allowNull: false\n  },\n  body: {\n    type: DataTypes.TEXT,\n    allowNull: true\n  },\n  data: {\n    type: DataTypes.JSONB,\n    allowNull: true\n  },\n  status: {\n    type: DataTypes.STRING(50),\n    allowNull: true\n  },\n  sent_at: {\n    type: DataTypes.DATE,\n    allowNull: true\n  },\n  created_at: {\n    type: DataTypes.DATE,\n    defaultValue: DataTypes.NOW\n  }\n}, {\n  tableName: 'notifications',\n  timestamps: false\n});\n\n// Define relationships\nNotification.belongsTo(User, { foreignKey: 'user_id', as: 'user' });\nUser.hasMany(Notification, { foreignKey: 'user_id', as: 'notifications' });\n\nmodule.exports = Notification;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-websocket-server-srcwebsocket",children:"3. WebSocket Server (src/websocket)"}),"\n",(0,t.jsx)(n.p,{children:"The WebSocket server enables real-time bidirectional communication with clients for delivering notifications instantly."}),"\n",(0,t.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Client\n    participant SocketIO\n    participant Redis\n    participant NotificationWorker\n\n    Client->>SocketIO: Connect\n    SocketIO--\x3e>Client: Connection Established\n    \n    Client->>SocketIO: authenticate(userId)\n    SocketIO->>Redis: Store Socket-User mapping\n    SocketIO--\x3e>Client: authenticated\n    \n    NotificationWorker->>SocketIO: sendNotificationToUser(userId, data)\n    SocketIO->>Redis: Get user's active sockets\n    SocketIO->>Client: notification event\n    \n    Client->>SocketIO: disconnect\n    SocketIO->>Redis: Remove socket mapping"}),"\n",(0,t.jsx)(n.h4,{id:"key-features-1",children:"Key Features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Socket.IO implementation"}),"\n",(0,t.jsx)(n.li,{children:"User authentication and room management"}),"\n",(0,t.jsx)(n.li,{children:"Real-time notification delivery"}),"\n",(0,t.jsx)(n.li,{children:"Connection tracking with metrics"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"websocket-implementation",children:"WebSocket Implementation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// src/websocket/index.js (partial)\nconst socketIO = require('socket.io');\nconst logger = require('../config/logging');\nconst { metrics } = require('../config/metrics');\n\nconst setupWebsocket = (server) => {\n  // Initialize Socket.IO with CORS settings\n  const io = socketIO(server, {\n    cors: {\n      origin: '*',\n      methods: ['GET', 'POST']\n    }\n  });\n\n  // Track active connections for metrics\n  const activeConnections = new Set();\n\n  io.on('connection', (socket) => {\n    logger.info(`New WebSocket connection: ${socket.id}`);\n    \n    // Add to active connections\n    activeConnections.add(socket.id);\n    metrics.activeWebsocketConnections.set(activeConnections.size);\n    \n    // Handle user authentication\n    socket.on('authenticate', async (data) => {\n      try {\n        const { userId } = data;\n        if (!userId) {\n          return socket.emit('error', { message: 'User ID is required' });\n        }\n\n        // Associate socket with user\n        socket.userId = userId;\n        await socket.join(`user:${userId}`);\n        \n        socket.emit('authenticated', { success: true });\n        logger.info(`User ${userId} authenticated on socket ${socket.id}`);\n      } catch (error) {\n        logger.error('Authentication error:', error);\n        socket.emit('error', { message: 'Authentication failed' });\n      }\n    });\n    \n    // Handle disconnection\n    socket.on('disconnect', async () => {\n      // Implementation details\n    });\n  });\n\n  return io;\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-message-queue-workers-srcworkers",children:"4. Message Queue Workers (src/workers)"}),"\n",(0,t.jsx)(n.p,{children:"Workers process messages from RabbitMQ queues to deliver notifications to users."}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    API[API Server] --\x3e|Publish| Exchange[RabbitMQ Exchange]\n    Exchange --\x3e|Routing Key| ImmediateQ[Immediate Queue]\n    Exchange --\x3e|Routing Key| ScheduledQ[Scheduled Queue]\n    \n    ImmediateQ --\x3e ImmediateWorker[Immediate Worker]\n    ScheduledQ --\x3e ScheduledWorker[Scheduled Worker]\n    \n    ImmediateWorker & ScheduledWorker --\x3e WebSocket[WebSocket Server]\n    ImmediateWorker & ScheduledWorker --\x3e Database[(Database)]\n    ImmediateWorker & ScheduledWorker --\x3e Metrics[Prometheus Metrics]"}),"\n",(0,t.jsx)(n.h4,{id:"key-features-2",children:"Key Features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Immediate notification processing (fully implemented)"}),"\n",(0,t.jsx)(n.li,{children:"Scheduled notification processing (partially implemented)"}),"\n",(0,t.jsx)(n.li,{children:"Error handling"}),"\n",(0,t.jsx)(n.li,{children:"WebSocket notification delivery"}),"\n",(0,t.jsx)(n.li,{children:"Metrics tracking"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"worker-implementation",children:"Worker Implementation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// src/workers/notificationWorker.js (partial)\nconst { consumeMessages } = require('../config/rabbitmq');\nconst { User, Device, Notification } = require('../models');\nconst logger = require('../config/logging');\nconst { metrics } = require('../config/metrics');\nconst websocket = require('../websocket');\n\nconst processImmediateNotifications = async () => {\n  logger.info('Starting immediate notification worker');\n  \n  await consumeMessages('immediate_notifications', async (message) => {\n    const startTime = Date.now();\n    \n    try {\n      const { notification_id, user_id, title, body, data } = message;\n      logger.info(`Processing notification ${notification_id} for user ${user_id}`);\n      \n      // Get user devices to send notification to\n      const devices = await Device.findAll({\n        where: { user_id }\n      });\n      \n      // Send via WebSocket\n      const socketSent = await websocket.sendNotificationToUser(user_id, {\n        id: notification_id,\n        title,\n        body,\n        data\n      });\n      \n      // Update notification status\n      await Notification.update(\n        { \n          status: 'delivered',\n          sent_at: new Date()\n        },\n        { where: { id: notification_id } }\n      );\n      \n      // Metrics\n      metrics.notificationsSent.inc({ status: 'success', type: 'immediate' });\n      const latency = (Date.now() - startTime) / 1000;\n      metrics.notificationLatency.observe({ type: 'immediate' }, latency);\n      \n    } catch (error) {\n      logger.error('Error processing notification:', error);\n      metrics.notificationsSent.inc({ status: 'error', type: 'immediate' });\n    }\n  });\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-configuration-modules-srcconfig",children:"5. Configuration Modules (src/config)"}),"\n",(0,t.jsx)(n.p,{children:"Configuration modules handle connections to external services and define their usage throughout the application."}),"\n",(0,t.jsx)(n.h4,{id:"key-configurations",children:"Key Configurations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"database.js"}),": PostgreSQL connection and Sequelize setup"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"redis.js"}),": Redis client configuration (partial implementation)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"rabbitmq.js"}),": RabbitMQ connection, exchanges, and queues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"logging.js"}),": Winston logger configuration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"metrics.js"}),": Prometheus metrics definition"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"implementation-issues",children:"Implementation Issues:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"database.js"}),": Uses hardcoded configuration values instead of environment variables"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"redis.js"}),": Limited functionality, not fully integrated with caching and rate limiting features"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,t.jsxs)(n.p,{children:["The current database schema is defined in the ",(0,t.jsx)(n.code,{children:"init-scripts/01-init.sql"})," file and implemented through Sequelize models."]}),"\n",(0,t.jsx)(n.h3,{id:"schema-vs-model-discrepancies",children:"Schema vs. Model Discrepancies:"}),"\n",(0,t.jsx)(n.h4,{id:"schema-tables",children:"Schema Tables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    phone VARCHAR(255) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"user-model-missing-fields",children:"User Model (Missing Fields)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const User = sequelize.define('User', {\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true\n  },\n  email: {\n    type: DataTypes.STRING(255),\n    allowNull: false,\n    unique: true,\n    validate: {\n      isEmail: true\n    }\n  },\n  created_at: {\n    type: DataTypes.DATE,\n    defaultValue: DataTypes.NOW\n  }\n}, {\n  tableName: 'users',\n  timestamps: false\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"missing-models",children:"Missing Models:"}),"\n",(0,t.jsx)(n.p,{children:"The following tables have schema definitions but no corresponding models:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"user_preferences"}),"\n",(0,t.jsx)(n.li,{children:"sent_notifications"}),"\n",(0,t.jsx)(n.li,{children:"failed_notifications"}),"\n",(0,t.jsx)(n.li,{children:"notification_logs"}),"\n",(0,t.jsx)(n.li,{children:"email_logs"}),"\n",(0,t.jsx)(n.li,{children:"sms_logs"}),"\n",(0,t.jsx)(n.li,{children:"push_notification_logs"}),"\n",(0,t.jsx)(n.li,{children:"webhook_logs"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"message-queue-architecture",children:"Message Queue Architecture"}),"\n",(0,t.jsx)(n.p,{children:"The service uses RabbitMQ for reliable message delivery, with the following components:"}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart LR\n    API[API Server] --\x3e|Publish| Exchange{notifications\\nExchange}\n    Exchange --\x3e|notification.immediate| ImmediateQ[immediate_notifications\\nQueue]\n    Exchange --\x3e|notification.scheduled| ScheduledQ[scheduled_notifications\\nQueue]\n    \n    ImmediateQ --\x3e ImmediateWorker[Immediate Worker]\n    ScheduledQ --\x3e ScheduledWorker[Scheduled Worker]"}),"\n",(0,t.jsx)(n.h3,{id:"exchanges",children:"Exchanges"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"notifications"})," (topic): Main exchange for notification routing"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"queues",children:"Queues"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"immediate_notifications"}),": For notifications to be delivered immediately"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"scheduled_notifications"}),": For notifications scheduled for future delivery (partially implemented)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"routing-keys",children:"Routing Keys"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"notification.immediate"}),": Routes to immediate_notifications queue"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"notification.scheduled"}),": Routes to scheduled_notifications queue (partially implemented)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"message-structure",children:"Message Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'{\n  notification_id: 123,       // Database ID of the notification\n  user_id: 456,               // Target user ID\n  title: "Notification Title", // Notification title\n  body: "Notification body",   // Notification message\n  data: { ... },              // Additional data payload\n  scheduled_time: "2023-05-01T12:00:00Z" // For scheduled notifications (partially implemented)\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"websocket-protocol",children:"WebSocket Protocol"}),"\n",(0,t.jsx)(n.p,{children:"The WebSocket implementation uses Socket.IO and defines the following events:"}),"\n",(0,t.jsx)(n.h3,{id:"server-to-client-events",children:"Server to Client Events"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"notification"}),": Sends notification data to a specific user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"authenticated"}),": Confirms successful authentication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"error"}),": Sends error information to client"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"client-to-server-events",children:"Client to Server Events"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"authenticate"}),": Client sends user ID to associate the socket with a user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"disconnect"}),": Client disconnects from the server"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling-approach",children:"Error Handling Approach"}),"\n",(0,t.jsx)(n.p,{children:"The service implements multiple layers of error handling:"}),"\n",(0,t.jsx)(n.h3,{id:"api-error-handling",children:"API Error Handling"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Try/catch blocks in controllers"}),"\n",(0,t.jsx)(n.li,{children:"Express error middleware for uncaught errors"}),"\n",(0,t.jsx)(n.li,{children:"HTTP status codes for different error types"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"worker-error-handling",children:"Worker Error Handling"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Try/catch blocks for message processing"}),"\n",(0,t.jsx)(n.li,{children:"Error logging to the centralized logging system"}),"\n",(0,t.jsx)(n.li,{children:"Message acknowledgement only after successful processing"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"connection-error-handling",children:"Connection Error Handling"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Basic reconnection logic for database and message queue"}),"\n",(0,t.jsx)(n.li,{children:"Graceful degradation when services are unavailable"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"metrics-and-monitoring",children:"Metrics and Monitoring"}),"\n",(0,t.jsx)(n.p,{children:"The service exposes Prometheus metrics for monitoring:"}),"\n",(0,t.jsx)(n.h3,{id:"custom-metrics",children:"Custom Metrics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"notifications_sent_total"}),": Counter for total sent notifications","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Labels: status, type"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"notification_latency_seconds"}),": Histogram for processing latency","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Labels: type"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"active_websocket_connections"}),": Gauge for active connections"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"integration",children:"Integration"}),"\n",(0,t.jsxs)(n.p,{children:["Metrics are exposed at the ",(0,t.jsx)(n.code,{children:"/metrics"})," endpoint for collection by Prometheus."]}),"\n",(0,t.jsx)(n.h2,{id:"logging-strategy",children:"Logging Strategy"}),"\n",(0,t.jsx)(n.p,{children:"The service uses a structured logging approach with Winston:"}),"\n",(0,t.jsx)(n.h3,{id:"log-levels",children:"Log Levels"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"error"}),": Application errors and exceptions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"warn"}),": Warnings and non-critical issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"info"}),": Important application events"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"debug"}),": Detailed debug information"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"log-format",children:"Log Format"}),"\n",(0,t.jsx)(n.p,{children:"JSON-formatted logs with standardized fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"timestamp"}),"\n",(0,t.jsx)(n.li,{children:"level"}),"\n",(0,t.jsx)(n.li,{children:"message"}),"\n",(0,t.jsx)(n.li,{children:"service"}),"\n",(0,t.jsx)(n.li,{children:"additional context"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"log-transport",children:"Log Transport"}),"\n",(0,t.jsx)(n.p,{children:"Currently, logs are output to the console. Future implementation will add ELK stack integration."}),"\n",(0,t.jsx)(n.h2,{id:"deployment-considerations",children:"Deployment Considerations"}),"\n",(0,t.jsx)(n.p,{children:"The service is designed for containerized deployment with Docker:"}),"\n",(0,t.jsx)(n.h3,{id:"container-configuration",children:"Container Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"docker-compose.yml"})," file defines the required services:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"API Server"}),"\n",(0,t.jsx)(n.li,{children:"PostgreSQL"}),"\n",(0,t.jsx)(n.li,{children:"RabbitMQ"}),"\n",(0,t.jsx)(n.li,{children:"Redis"}),"\n",(0,t.jsx)(n.li,{children:"Prometheus (optional profile)"}),"\n",(0,t.jsx)(n.li,{children:"ELK stack (optional profile, planned for future)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"resource-requirements",children:"Resource Requirements"}),"\n",(0,t.jsx)(n.p,{children:"Recommended minimum resources for current implementation:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"API Server: 256MB RAM"}),"\n",(0,t.jsx)(n.li,{children:"Database: 1GB RAM"}),"\n",(0,t.jsx)(n.li,{children:"RabbitMQ: 512MB RAM"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"known-issues-and-improvement-areas",children:"Known Issues and Improvement Areas"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"User Model Discrepancy"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The User model is missing ",(0,t.jsx)(n.code,{children:"name"})," and ",(0,t.jsx)(n.code,{children:"phone"})," fields that exist in the database schema"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fix"}),": Update the User model to include all fields from the schema"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Missing Model Files"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Several tables defined in the schema don't have corresponding model files"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fix"}),": Create model files for UserPreference, SentNotification, NotificationLog, etc."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scheduled Notifications"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Worker logic exists but API endpoint is not implemented"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fix"}),": Implement the scheduled notifications API endpoint and controller"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Hardcoded Configuration"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Database configuration uses hardcoded values instead of environment variables"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fix"}),": Use environment variables throughout the configuration files"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Redis Integration"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Limited Redis functionality"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fix"}),": Expand Redis integration for caching, rate limiting, and more robust presence tracking"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"API Documentation Alignment"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Some API documentation doesn't accurately reflect implementation status"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fix"}),": Update API documentation to match actual implementation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"code-style-and-patterns",children:"Code Style and Patterns"}),"\n",(0,t.jsx)(n.p,{children:"The codebase follows these patterns and conventions:"}),"\n",(0,t.jsx)(n.h3,{id:"asynchronous-handling",children:"Asynchronous Handling"}),"\n",(0,t.jsx)(n.p,{children:"Async/await is used throughout the codebase for asynchronous operations."}),"\n",(0,t.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"Consistent error handling with try/catch blocks for async code."}),"\n",(0,t.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,t.jsx)(n.p,{children:"Consistent logging format with appropriate log levels."}),"\n",(0,t.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Environment-based configuration with sensible defaults."}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsx)(n.p,{children:"The service implements several basic security measures:"}),"\n",(0,t.jsx)(n.h3,{id:"api-security",children:"API Security"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Helmet.js for HTTP security headers"}),"\n",(0,t.jsx)(n.li,{children:"CORS configuration"}),"\n",(0,t.jsx)(n.li,{children:"Input validation on key endpoints"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"authentication",children:"Authentication"}),"\n",(0,t.jsx)(n.p,{children:"Basic authentication for WebSocket connections. More robust authentication is planned for future implementation."}),"\n",(0,t.jsx)(n.h2,{id:"testing-approach",children:"Testing Approach"}),"\n",(0,t.jsx)(n.p,{children:"Test suite is planned for future implementation. The current architecture supports:"}),"\n",(0,t.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Individual module testing"}),"\n",(0,t.jsx)(n.li,{children:"Mocking of external dependencies"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"API endpoint testing"}),"\n",(0,t.jsx)(n.li,{children:"Database integration testing"}),"\n",(0,t.jsx)(n.li,{children:"Message queue integration testing"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,t.jsx)(n.h3,{id:"local-development",children:"Local Development"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Start dependencies with Docker Compose:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d postgres rabbitmq\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the application in development mode:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"debugging",children:"Debugging"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use standard Node.js debugging via ",(0,t.jsx)(n.code,{children:"--inspect"})]}),"\n",(0,t.jsx)(n.li,{children:"Console logs are formatted for readability in development"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"roadmap-and-future-enhancements",children:"Roadmap and Future Enhancements"}),"\n",(0,t.jsx)(n.mermaid,{value:"gantt\n    title Development Roadmap\n    dateFormat  YYYY-MM-DD\n    \n    section Short-term\n    Fix User Model             :2023-03-01, 5d\n    Implement Scheduled API    :2023-03-06, 7d\n    Create Missing Models      :2023-03-13, 10d\n    Improve Redis Integration  :2023-03-23, 14d\n    \n    section Mid-term\n    Multi-channel Delivery     :2023-04-15, 30d\n    User Preferences           :2023-05-15, 15d\n    Notification Templates     :2023-06-01, 21d\n    ELK Stack Integration      :2023-06-21, 14d\n    \n    section Long-term\n    Webhook Integration        :2023-07-15, 30d\n    Advanced Analytics         :2023-08-15, 45d\n    Notification Batching      :2023-10-01, 21d\n    A/B Testing                :2023-10-21, 30d"}),"\n",(0,t.jsx)(n.h3,{id:"short-term-next-release",children:"Short-term (Next Release)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Fix User model to match database schema (add name and phone fields)"}),"\n",(0,t.jsx)(n.li,{children:"Implement scheduled notifications API endpoint"}),"\n",(0,t.jsx)(n.li,{children:"Create models for user preferences and notification logs"}),"\n",(0,t.jsx)(n.li,{children:"Improve Redis integration for better caching and rate limiting"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mid-term",children:"Mid-term"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Implement multi-channel delivery (email, SMS)"}),"\n",(0,t.jsx)(n.li,{children:"Add user preferences functionality"}),"\n",(0,t.jsx)(n.li,{children:"Implement notification templates"}),"\n",(0,t.jsx)(n.li,{children:"Complete ELK stack integration"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"long-term",children:"Long-term"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Implement webhook integration"}),"\n",(0,t.jsx)(n.li,{children:"Add advanced analytics"}),"\n",(0,t.jsx)(n.li,{children:"Implement notification batching"}),"\n",(0,t.jsx)(n.li,{children:"Add A/B testing capabilities"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);